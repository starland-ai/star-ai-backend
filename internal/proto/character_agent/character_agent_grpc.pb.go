// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: character_agent.proto

package character_agent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Agent_ChatCompletions_FullMethodName         = "/agent.Agent/ChatCompletions"
	Agent_ChatCompletionsStream_FullMethodName   = "/agent.Agent/ChatCompletionsStream"
	Agent_ConfirmCharacterSetting_FullMethodName = "/agent.Agent/ConfirmCharacterSetting"
)

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentClient interface {
	ChatCompletions(ctx context.Context, in *ChatCompletionRequest, opts ...grpc.CallOption) (*ChatCompletionResponse, error)
	ChatCompletionsStream(ctx context.Context, in *ChatCompletionRequest, opts ...grpc.CallOption) (Agent_ChatCompletionsStreamClient, error)
	ConfirmCharacterSetting(ctx context.Context, in *ConfirmCharacterSettingRequest, opts ...grpc.CallOption) (*ConfirmCharacterSettingResponse, error)
}

type agentClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentClient(cc grpc.ClientConnInterface) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) ChatCompletions(ctx context.Context, in *ChatCompletionRequest, opts ...grpc.CallOption) (*ChatCompletionResponse, error) {
	out := new(ChatCompletionResponse)
	err := c.cc.Invoke(ctx, Agent_ChatCompletions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) ChatCompletionsStream(ctx context.Context, in *ChatCompletionRequest, opts ...grpc.CallOption) (Agent_ChatCompletionsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[0], Agent_ChatCompletionsStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &agentChatCompletionsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Agent_ChatCompletionsStreamClient interface {
	Recv() (*ChatCompletionStreamResponse, error)
	grpc.ClientStream
}

type agentChatCompletionsStreamClient struct {
	grpc.ClientStream
}

func (x *agentChatCompletionsStreamClient) Recv() (*ChatCompletionStreamResponse, error) {
	m := new(ChatCompletionStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentClient) ConfirmCharacterSetting(ctx context.Context, in *ConfirmCharacterSettingRequest, opts ...grpc.CallOption) (*ConfirmCharacterSettingResponse, error) {
	out := new(ConfirmCharacterSettingResponse)
	err := c.cc.Invoke(ctx, Agent_ConfirmCharacterSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServer is the server API for Agent service.
// All implementations must embed UnimplementedAgentServer
// for forward compatibility
type AgentServer interface {
	ChatCompletions(context.Context, *ChatCompletionRequest) (*ChatCompletionResponse, error)
	ChatCompletionsStream(*ChatCompletionRequest, Agent_ChatCompletionsStreamServer) error
	ConfirmCharacterSetting(context.Context, *ConfirmCharacterSettingRequest) (*ConfirmCharacterSettingResponse, error)
	mustEmbedUnimplementedAgentServer()
}

// UnimplementedAgentServer must be embedded to have forward compatible implementations.
type UnimplementedAgentServer struct {
}

func (UnimplementedAgentServer) ChatCompletions(context.Context, *ChatCompletionRequest) (*ChatCompletionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatCompletions not implemented")
}
func (UnimplementedAgentServer) ChatCompletionsStream(*ChatCompletionRequest, Agent_ChatCompletionsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatCompletionsStream not implemented")
}
func (UnimplementedAgentServer) ConfirmCharacterSetting(context.Context, *ConfirmCharacterSettingRequest) (*ConfirmCharacterSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmCharacterSetting not implemented")
}
func (UnimplementedAgentServer) mustEmbedUnimplementedAgentServer() {}

// UnsafeAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServer will
// result in compilation errors.
type UnsafeAgentServer interface {
	mustEmbedUnimplementedAgentServer()
}

func RegisterAgentServer(s grpc.ServiceRegistrar, srv AgentServer) {
	s.RegisterService(&Agent_ServiceDesc, srv)
}

func _Agent_ChatCompletions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatCompletionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).ChatCompletions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_ChatCompletions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).ChatCompletions(ctx, req.(*ChatCompletionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_ChatCompletionsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatCompletionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).ChatCompletionsStream(m, &agentChatCompletionsStreamServer{stream})
}

type Agent_ChatCompletionsStreamServer interface {
	Send(*ChatCompletionStreamResponse) error
	grpc.ServerStream
}

type agentChatCompletionsStreamServer struct {
	grpc.ServerStream
}

func (x *agentChatCompletionsStreamServer) Send(m *ChatCompletionStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Agent_ConfirmCharacterSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmCharacterSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).ConfirmCharacterSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_ConfirmCharacterSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).ConfirmCharacterSetting(ctx, req.(*ConfirmCharacterSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Agent_ServiceDesc is the grpc.ServiceDesc for Agent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Agent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChatCompletions",
			Handler:    _Agent_ChatCompletions_Handler,
		},
		{
			MethodName: "ConfirmCharacterSetting",
			Handler:    _Agent_ConfirmCharacterSetting_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChatCompletionsStream",
			Handler:       _Agent_ChatCompletionsStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "character_agent.proto",
}
